name: "Test GAP package"
description: "Runs the tests included in the GAP package"
inputs:
  COVERAGE:
    description: "Set to true to gather coverage"
    required: false
    default: false
  GAP_TESTFILE:
    description: "Name of the GAP file to be read for executing the package tests (overrides TestFile in PackageInfo.g)"
    required: false
    default: ""
  GAP_FLAGS:
    description: "Additional flags to pass to the GAP executable"
    required: false
    default: ""
  ONLY_NEEDED:
    description: "Only load necessary packages, not suggested ones, prior to testing"
    required: false
    default: false
  ALL_PACKAGES:
    description: "Load all packages prior to testing"
    required: false
    default: false

runs:
  using: "composite"
  steps:
      - name: "Run tests"
        shell: bash
        run: |
         set -ex
         
         # Set up a custom GAP root containing only this package, so that
         # we can force GAP to load the correct version of this package
         mkdir -p /tmp/gaproot/pkg/
         ln -f -s $PWD /tmp/gaproot/pkg/
         
         # Start GAP with custom GAP root, to ensure correct package version is loaded
         GAP="gap ${{ inputs.GAP_FLAGS }} -l /tmp/gaproot; --quitonbreak"
         
         # Gather coverage
         if [ "${{ inputs.COVERAGE }}" == "true" ]; then
             mkdir -p ${COVDIR-coverage}
             GAP="$GAP --cover ${COVDIR-coverage}/$(mktemp XXXXXX).coverage"
         fi
         
         $GAP <<GAPInput
         
         GAP_TESTFILE := "${{ inputs.GAP_TESTFILE }}";
         
         Read( "PackageInfo.g" );
         info := GAPInfo.PackageInfoCurrent;
         if IsEmpty( GAP_TESTFILE ) or not IsExistingFile( GAP_TESTFILE ) then
             GAP_TESTFILE := info.TestFile;
         fi;
         
         # Load the package with debug info
         SetInfoLevel( InfoPackageLoading, PACKAGE_DEBUG );
         SetPackagePath( info.PackageName, "/tmp/gaproot/pkg/$(basename $PWD)" );
         if ${{ inputs.ALL_PACKAGES }} then
             LoadAllPackages();
         elif ${{ inputs.ONLY_NEEDED }} then
             LoadPackage( info.PackageName : OnlyNeeded );
         else
             LoadPackage( info.PackageName );
         fi;
         SetInfoLevel( InfoPackageLoading, PACKAGE_ERROR );
         
         if EndsWith( GAP_TESTFILE, ".tst" ) then
             QUIT_GAP( Test( GAP_TESTFILE, rec( compareFunction := "uptowhitespace" ) ) );
         else
             Read( GAP_TESTFILE );
             Error( "Package TestFile did not exit gap" );
         fi;
         GAPInput
